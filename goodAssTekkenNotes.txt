Introducing Firebase Realtime Database lets you keep track of user entities yourself - this lets you associate things such as messages, invoices, books, etc. to users while Firebase handles the sensitive data. You can also migrate Firebase Realtime Database to Cloud Firestore.

Firebase manages user authentication but you handle user entities.

Note: You can use indexes for faster queries

Your realtime database is currently set to TEST mode, allowing all reads and writes during development.

Implementing Firebase Realtime Database
---
Initialize database API in Firebase class constructor (just like the authentication API)
Extend class interface by adding User API logic that lets you retrieve references to individual users via UserID as well as references to all users.
    Firebase paths follow REST philosophy where every user is associated with a URI.

---
Firebase Realtime Database Info:
    Data stored as JSON and synced realtime
    After you finish testing your app, read the Firebase Realtime Database Rules and create your own rules
    Can view database in Firebase console
    

Read or write data from a database:
    To do this, you need an instance of firebase.database.reference (async listener)
        You attach the listener and it's ran once for initial data and again anytime data changes
    set() lets you save and replace data at a specific reference
    on() or once() to read data at a path and listen for changes
        once() lets you snapshot data once w/o listening to changes
    value event lets you read and listen for any changes to any content in a path
        Retrieve daa in the snapshot in the val() method
    Updating and deleting data done w/ update() and remove()
    Data is written locally before being written to the database, allowing for database writes to happen after connection is regained post-loss.

Good Ass Tekken User Management
---
    Goal: Creating and getting users from Firebase Realtime Database
        Add user creation to  signup so users can be created and saved after signup is successful
            Done by adding a first .then() promise which creates the user in your firebase database before the second .then()
            callback which sets the state back to the initial states and reroutes to home page.
                What this now does is it creates a user in firebase's inteernal auth database
                and if this is successful, it creates a user in firebase's realtime Database
                    uses firebase class reference by providing the uid of the user from the auth database
                    basically, it uses the auth user database ID to create a user in the realtime database
        DO NOT store sensitive user info such as passwords, etc. in your realtime database

Admin component a good place for logic to retrieve info from all users
Retrieve all the users in admin componentDidMount()
Needs to be a class component to keep track of users and loading
    users empty object
    loading set to false in initial state but changed to true in first line of componentDidMount which makes sense
    Because the users are objects instead of lists when retrieved from Firebase Realtime DB,
    it's a lot more convenient to convert the users object into a state array
    A LOT easier to use arrays than objects to display information.
    YOU'RE MAKING AN ARRAY OF OBJECTS!! OHHHH.
Remove the listener when the component unmounts

--
So the million dollar question of the day is...where do I take the development of this application?
I think that for starters, I should define the baseline MVP.
MVP for Good Ass Tekken:

User sign up with captcha. The intention of this captcha is used to stop bots.
Alright, so now we will look into reCAPTCHA.
    reCAPTCHA protects sites from spam and abuse from bots while allowing human usage!
    Can be added to your site w/ firebase hosting + cloud functions for firebase.
    firebase hosting is used to serve content and cloud functions for firebase validate the recaptcha response

After user signs up, they have the freedom to be able to upload matches onto the website. Other features will be TBD of course, but I think that the ability to simply just Add Matches is
the most important thing to focus on.
This means that I would have to create a basic form which I can use to add matches.
What search options do I use?
    Match Conditions: Tournament / Casuals / Deathmatch
    Event Name
    Characters
    Winning Characters
    Players
    Winning Player
    Stage Conditions: Walls / Infinite / Both

    https://www.robinwieruch.de/react-firebase-realtime-database - Realtime DB setup
    https://www.robinwieruch.de/react-firebase-authorization-roles-permissions - Auth permissions
    https://www.robinwieruch.de/react-firebase-auth-persistence - Auth persistence
    Use firebase realtime DB or cloud firestore? What do you want?
        Firestore lets you store and sync app data to the cloud
        Realtime DB is just a big json tree while firestore is a document model db that stores your data in objects called documents
        firestore makes it a lot easier to search across multiple fields
        firestore scales easier if your app gets popular
        Easier for one time fetch queries
        firestore pricing driven by the # of reads and writes rather than the amount of data that's downloaded or stored
        so i think it's best to use firestore for my project.



When user uploads the match, what happens?
    It should be able to be searched for immediately
        Okay.
    Where does the user get redirected to, if they even do? How are they notified of a successful upload?
        Notification that gives them the option to either:
            1. Submit another video
            2. Return to homepage
Searching
    How do users search for a match?


To-do:
initialize firestore DB in your firebase class
Make sure you start in test mode then change the permissions when the app is done!
https://firebase.google.com/docs/firestore/data-model
Firestore is a document oriented database, meaning there are no tables and rows. Data is stored in documents that are organized into collections.
So a collection is the parent then and the document are the children entities. Documents can have subcollections or nested objects.
Collections and documents are created implicitly - if either does not exist then cloud firestore creates it.
Document is the unit of storage

Best practice to use the same fields and data types across multiple documents
Name of documents are unique - can provide own userIDs or let firestore create them for you automatically
When you create the first document in a collection, the collection is created.
When you delete all the documents in a collection, the collection gets deleted.

Can create references to collections or documents!
With collection references you can query documents in a collection
With document references you can read or write an individual document
Subcollection - a collection associated w/ a specific document
Deleting documennts do not delete subcollections. You gotta delete those manually!

After you create the Cloud Firestore database and the collection you'd like to populate:

So apparently when it comes to retrieving the firestore database URL - it's not the direct DB URL but is the same URL that's under firebase realtime DB
React with Cloud Firestore
https://www.robinwieruch.de/react-firestore-tutorial